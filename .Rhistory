companiesData %>% group_by(company) %>% arrange(desc(margin), .by_group=TRUE)
load("/media/umair/F00E03AB0E0369C4/Studies/GitRepos/Getting and Cleaning Data Project/UCI HAR Dataset/.RData")
View(mergedset)
library(tidyr)
library(dplyr)
View(mergedset)
colnames(mergedset)[3]
select(mergedset, tBodyAcc-mean()-X: ,)
select(mergedset, tBodyAcc-mean()-X: )
select(mergedset, 3:563)
colnames(mergedset)[563]
longset1 <- gather(mergedset, tBodyAcc-mean()-X:angle(Z,gravityMean), key = "key", value = "measurement")
longset1 <- gather(mergedset, `tBodyAcc-mean()-X`:`angle(Z,gravityMean)`, key = "key", value = "measurement")
colnames(longset1)
rm(longset1)
load("/media/umair/F00E03AB0E0369C4/Studies/GitRepos/Getting and Cleaning Data Project/UCI HAR Dataset/.RData")
library(dplyr)
library(tidyr)
vignette()
vignette(dplyr)
vignette('dplyr')
View(mergedset)
head(select(mergedset, -(subject:activity)))
str(mergedset)
mergedset <- as_tibble(mergedset)
str(mergedset)
mergedset <- data.table::data.table(mergedset)
str(mergedset)
select(mergedset, -(subject:activity))
select(mergedset, subject:activity)
dplyr::select(mergedset, subject:activity)
names(mergedset)[1:3]
select(mergedset, subject:activity)
class(mergedset)
install.packages('swirl')
library(swirl)
library(datasets)
data("cars")
View(cars)
?cars
with(cars, plot(speed, dist))
library(lattice)
state <- data.frame(state.x77, region = state.region)
View(cars)
View(state)
state.x77
?state.x77
state.abb
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
library(ggplot2)
data("mpg")
mpgframe <- data.frame(mpg)
View(mpgframe)
xyplot(hwy ~ displ, data = mpgframe)
qplot(displ, hwy, data = mpgframe)
sample(1:6, 2, replace = FALSE)
sum(sample(1:6, 2, replace = F))
qplot(sum(sample(1:6, 2, replace = F)))
hist(sum(sample(1:6, 2, replace = F)))
hist(replicate(sum(sample(1:6, 2, replace = F))), 10000)
hist(replicate(10000, sum(sample(1:6, 2, replace = F))))
library(ggplot2)
qplot(replicate(10000, sum(sample(1:6, 2, replace = F))))
qplot(replicate(10000, sum(sample(1:6, 2, replace = F))), binwidth = 1)
rm(list = ls())
source('~/.active-rstudio-document')
rolls <- replicate(10000, roll())
qplot(rolls, binwidth = 1)
qplot(replicate(10000, sum(sample(1:6, 2, replace = T))), binwidth = 1)
library(datasets)
table(airquality$Ozone)
hist(airquality$Ozone)
q()
rm(list = ls())
example(points)
?gl
q()
?par
?plot
?points
rm(list = ls())
rm(list = ls())
library(lattice)
library(datasets)
?transform
airquality$Month <- factor(airquality$Month)
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
?rep
library(ggplot2)
mpg
str(mpg)
xyplot(hwy ~ displ | drv, data = mpg)
xyplot(hwy ~ displ, data = mpg)
xyplot(hwy ~ displ | drv, data = mpg)
xyplot(hwy ~ displ | cyl, data = mpg)
summary(mgg$cyl)
summary(mpg$cyl)
str(mpg$cyl)
mpg$cyl <- factor(mpg$cyl)
xyplot(hwy ~ displ | cyl, data = mpg)
xyplot(hwy ~ displ | manufacturer, data = mpg)
qplot(displ, hwy, data = mpg, color = dvr)
qplot(displ, hwy, data = mpg, color = drv)
qplot(drv, data = mpg)
qplot(drv, data = mpg, fill = hwy)
qplot(drv, data = mpg, fill = class)
qplot(hwy, data = mpg, fill = drv)
q()
myedit
rm(list = ls())
q()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?xylot
?xyplot
?nlme
View(BodyWeight)
vignette()
?lattice
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2movies)
qplot(Wind, Ozone, data = airquality) + geom_smooth()
rep(1:3, each=4)
rnorm(12)
?rnorm
?rbinom
q()
q()
height <- c(4.0, 4.5, 5.0, 5.2, 5.4, 5.8, 6.1, 6.2, 6.4, 6.8)
weight <- c(42, 44, 49, 55, 53, 58, 60, 64, 66, 69)
datmat <- cbind(height, weight)
with(datmat, plot(height, weight))
View(datmat)
with(datmat, plot(height ~ weight))
rm(list = c(height, weight))
rm(list = (height, weight))
rm(list = list(height, weight))
rm(list = c('height', 'weight'))
with(datmat, plot(height ~ weight))
with(datmat, plot(height, weight))
plot(datmat[,1], datmat[,2])
transform(datmat)
datmat <- transform(datmat)
with(datmat, plot(height, weight))
model <- lm(height ~ weight, datmat)
abline(model)
abline(model, lwd = 2)
View(model)
abline(model, lwd = 2)
with(datmat, plot(height, weight))
abline(model, lwd = 2)
abline(lm(height ~ weight, datmat))
abline(lm(weight ~ height, datmat))
library(datasets)
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", pch = 20))
abline(lm(Ozone ~ Wind, airquality))
par(mfrow = c(1,2))
with(airquality, {})
with(airquality, {)
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
, plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")})
with(airquality, {plot(Wind, Ozone, main = "Ozone and Wind") plot(Solar.R, Ozone, main = "Ozone, and Solar Radiation") })
with(airquality, {plot(Wind, Ozone, main = "Ozone and Wind") + plot(Solar.R, Ozone, main = "Ozone, and Solar Radiation") })
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(airquality, { plot(Wind, Ozone, main = "Ozone and Wind") + plot(Solar.R, Ozone, main = "Ozone and Solar Radiation") + plot(Temp, Ozone, main = "Ozone and Temperature") + mtext("Ozone and Weather in New York City", outer = TRUE) })
rm(list = ls())
set.seed(19)
x <- rnorm(30)
y <- rnorm(30)
plot(x, y, col=rep(1:3, each = 10), pch = 19)
dev.off()
plot(x, y, col=rep(1:3, each = 10), pch = 19)
par(mfrow=c(1, 3))
plot(x, y, col=rep(1:3, each = 10), pch = 19)
reset.par()
dev.off()
plot(x, y, col=rep(1:3, each = 10), pch = 19)
legend("bottomright", legend = paste("Group", 1:3), col = 1:3, pch = 19, bty = 'n')
par(mfrow = c(1, 2))
image(volcano, col = heat.colors(10), main = "heat.colors()")
image(volcano, col = topo.colors(10), main = "topo.colors()")
heat.colors()
heat.colors(10)
?grey
pal <- colorRamp(c('red', 'blue'))
pal(0)
pal(1)
pal(0.5)
pal(2)
pal(-1)
pal(1)
pal(0.5)
seq(0, 1, len = 10)
pal(c('purple', 'black'))
pal <- colorRamp(c('purple', 'black'))
pal(0)
pal <- colorRampPalette(c('red', 'yellow'))
q()
set.seed(1234)
x <- rnorm(12, rep(1:3, each = 4), 0.2)
x <- rnorm(12, rep(c(1, 2, 1), each = 4), 0.2)
set.seed(1234)
x <- rnorm(12, rep(1:3, each = 4), 0.2)
y <- rnorm(12, rep(c(1, 2, 1), each = 4), 0.2)
plot(x, y, col = 'blue', pch = 19, cex = 2)
text(x+0.05, y+0.05, labels=as.character(1:12))
df <- data.frame(x=x, y=y)
dist(df)
rdistxy <- as.matrix(dist(df))
diag(rdistxy)
diag(rdistxy) <- diag(rdistxy)+100000
diag(rdistxy)
rdistxy
rdistxy <- as.matrix(dist(df))
rdistxy
diag(rdistxy) <- diag(rdistxy)+100000
which(rdistxy == min(rdistxy))
which(rdistxy == min(rdistxy), arr.ind = TRUE)
min(rdistxy)
ind <- which(rdistxy == min(rdistxy), arr.ind = TRUE)
View(df)
?which
x
x[ind[1,]]
ind[1,]
par(mfrow = c(1, 2))
plot(x, y, col = 'blue', pch = 19, cex = 2, main="Data")
text(x+0.05, y+0.05, labels=as.character(1:12))
?text
points(x[ind[1,]], y[ind[1,]], col = 'orange', pch=19, cex=2)
library(dplyr)
hcluster <- hclust(dist(df))
dendro <- as.dendrogram(hcluster)
cutDendro <- cut(dendro, h = (hcluster$height[1] + 0.00001))
?cut
plot(cutDendro$lower[[11]], yaxt = 'n', main = "Begin building tree")
dendro
names(dendro)
hcluster
names(hcluster)
hcluster$height
order(rdistxy)
rdistxy[order(rdistxy)][3]
nextmin <- rdistxy[order(rdistxy)][3]
ind <- which(rdistxy == nextmin, arr.ind = TRUE)
ind
hclustering <- hclust(dist(data.frame(x=x, y=y)))
plot(hclustering)
dev.off()
plot(hclustering)
data = as.matrix(mtcars)
head(data)
heatmap(data)
heatmap(data, scale = 'column')
heatmap(data, scale = 'column', Colv = NA, Rowv = NA)
kmeansObj <- kmeans(df, centers = 3)
kmeansObj$cluster
kmeansObj$centers
plot(x, y)
plot(x, y, pch = 19, cex = 2, col = 'blue')
points(kmeansObj)
?par
points(kmeansObj, pch = 3)
points(kmeansObj$centers, pch = 3)
plot(x, y, pch = 19, cex = 2, col = c(rep('blue', 4), rep('orange', 4), rep('red', 4)))
points(kmeansObj$centers, pch = 3, col('blue', 'orange', 'red'))
points(kmeansObj$centers, pch = 3, col= c('blue', 'orange', 'red'))
points(kmeansObj$centers, pch = 3, col= c('blue', 'orange', 'red'), cex = 2)
rm(list = ls())
set.seed(1234)
10:1
q()
q()
library(dplyr)
"devtools" %in% installed.packages()
library(devtools)
"shiny" %in% installed.packages()
install github("StatsWithR/statsr")
install_github("StatsWithR/statsr")
q()
?rnorm
rnorm(100)
mean(rnorm(100))
mean(rnorm(1000))
mean(rnorm(10000))
mean(rnorm(100000))
mean(rnorm(100000))
mean(rnorm(100000))
mean(rnorm(100000))
q()
summary(cars)
cars
pressure
?cars
?pressure
library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
dim(arbuthnot)
range(arbuthnot$year)
quantile(arbuthnot$year)
summary(arbuthnot$year)
summary(arbuthnot)
?which
which(arbuthnot, boys==min(arbuthnot$boys))
which(boys==min(arbuthnot$boys), arbuthnot)
which(boys==min(arbuthnot$boys))
which(arbuthnot$boys==min(arbuthnot$boys))
arbuthnot[which(arbuthnot$boys==min(arbuthnot$boys)),]
arbuthnot[which(arbuthnot$boys==min(arbuthnot$boys)),]
subset(arbuthnot, boys==min(boys))
# type your code for the Question 2 here, and Knit
arbuthnot$girls
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
View(arbuthnot)
ggplot(arbuthnot, aes(x = year, y = total)) + geom_line()
ggplot(arbuthnot, aes(x = year, y = total)) + geom_line() + geom_point()
arbuthnot <- arbuthnot %>% mutate(more_boys = boys > girls)
View(arbuthnot)
data(present)
range(present$year)
View(arbuthnot)
View(present)
View(present)
# type your code for Question 5 here, and Knit
present <- present %>% mutate(total = boys + girls, prop_boys = boys/total)
View(present)
View(present)
present <- mutate(present, more_boys = boys > girls)
View(present)
?arrange
arrange(present, desc(total))
28.38
28/38
28/36
(51/55)-(38/52)
install.packages("kernlab")
library(kernlab)
data("spam")
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
testbinom <- rbinom(4601, size = 2, prob = c(0.6, 0.2, 0.2))
table(testbinom)
testbinom <- rbinom(4601, size = 2, prob = c(0.6, 0.2))
table(testbinom)
testbinom <- rbinom(4601, size = 3, prob = c(0.6, 0.2, 0.2))
table(testbinom)
?rbinom
rbinom(8, size = 3, prob = 0.6)
rbinom(8, size = 3, prob = 0.5)
rbinom(8, size = 3, prob = 0.1)
rbinom(8, size = 3, prob = 0.7)
rm(testbinom)
trainSpam <- spam[trainIndicator == 1,]
testSpam <- spam[trainIndicator == 0, ]
head(names(spam))
head(trainSpam)
head(trainSpam[, 1:10])
table(trainSpam$type)
boxplot(capitalAve ~ type, data = trainSpam)
View(testSpam)
?spam
boxplot(log10(capitalAve + 1) ~ type, data = trainSpam)
boxplot(log(capitalAve) ~ type, data = trainSpam)
?log
pairs(log(testSpam[,1:4] + 1))
?pairs
hCluster <- hclust(dist(t(trainSpam[, 1:57])))
plot hCluster
plot(hCluster)
hCluster <- hclust(dist(t(trainSpam[, 1:55])))
plot(hCluster)
hCluster <- hclust(dist(t(log(trainSpam[, 1:55])))
)
hCluster <- hclust(dist(t(log(trainSpam[, 1:55]))))
hCluster <- hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hCluster)
hCluster <- hclust(dist(t(log(trainSpam[, 1:55] + 1))))
plot(hCluster)
library(kernlab)
?spam
plot(hCluster)
class(trainSpam$type)
unclass(trainSpam$type)
trainSpam$numType <- as.numeric(trainSpam$type) - 1
type(trainSpam$type)
str(trainSpam$type)
costFunction <- function(x, y) {sum(x != (y > 0.5))}
cvError = rep(NA, 55)
for (i in 1:55) {}
for (i in 1:55) {
library(boot)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit <- glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] <- cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
View(trainSpam)
names(trainSpam[which.min(cvError)])
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
unzip('activity.zip')
PAMData <- read.csv('activity.csv')
View(PAMData)
?as.Date
?strptime
summary(PAMData$date)
PamData <- read.csv('activity.csv')
rm(PAMData)
PamData$date <- strptime(PamData$date)
PamData$date <- strptime(PamData$date, format = "%Y-%m-%d")
View(PamData)
summary(PamData$date)
288*5
24*12
library(dplyr)
PamData %>% group_by(date) %>% summarise(meansteps = mean(steps, na.rm = T))
character(0)
testvec <- character(10)
testvec
knitr::knit2html("/media/umair/F00E03AB0E0369C4/Studies/GitRepos/RepData_PeerAssessment1/PA1_template.Rmd")
knitr::opts_chunk$set(echo = TRUE)
if (!require(dplyr)) install.packages("dplyr")
library(dplyr)
if (!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
sprintf("An average of %d steps were taken each day with a median of %d", as.integer(mean(stepsPerDayWoNa$total.steps)), as.integer(median(stepsPerDayWoNa$total.steps)))
library(dplyr)
library(ggplot2)
# 1
unzip('activity.zip')
PamData <- read.csv('activity.csv')
# 2
PamData$date <- as.Date(PamData$date, format = "%Y-%m-%d")
# 1
stepsPerDay <- PamData %>% group_by(date) %>% summarise(total.steps = sum(steps, na.rm = T))
# 2
ggplot(stepsPerDay, aes(x = date, y = total.steps)) + geom_histogram(stat = "identity")
# 3
sprintf("An average of %d steps were taken each day with a median of %d", as.integer(mean(stepsPerDay$total.steps)), as.integer(median(stepsPerDay$total.steps)))
# 1
meanStepsByInterval <- PamData %>% group_by(interval) %>% summarise(meansteps = mean(steps, na.rm = T))
with(meanStepsByInterval, plot(x = interval, y = meansteps, type = "l"))
# 2
sprintf("The %dth interval has the maximum number of steps on average across all the days in the dataset.", meanStepsByInterval$interval[which.max(meanStepsByInterval$meansteps)])
# 1
sum(is.na(PamData$steps))
# 3
meanStepsByIntByDay <- PamData %>% group_by(weekday = weekdays(date), interval) %>% summarise(meanSteps = mean(steps, na.rm = T))
meanStepsByIntByDay$meanSteps <- ceiling(meanStepsByIntByDay$meanSteps)
naindex <- which(is.na(PamData$steps))
PamData$weekday <- weekdays(PamData$date)
for (i in naindex) {
PamData[i,1] <- meanStepsByIntByDay[meanStepsByIntByDay$weekday==PamData[i,4] & meanStepsByIntByDay$interval==PamData[i,3],3]
}
# 4
stepsPerDayWoNa <- PamData %>% group_by(date) %>% summarise(total.steps = sum(steps, na.rm = T))
ggplot(stepsPerDayWoNa, aes(x = date, y = total.steps)) + geom_histogram(stat = "identity")
sprintf("An average of %d steps were taken each day with a median of %d", as.integer(mean(stepsPerDayWoNa$total.steps)), as.integer(median(stepsPerDayWoNa$total.steps)))
head(weekdays(PamData$date))
PamData <- PamData %>% mutate(partOfWeek=factor(weekdays(date)%in%c("Saturday", "Sunday"), levels = c(0, 1), labels = c("Weekday", "Weekend")))
View(PamData)
PamData <- PamData %>% mutate(partOfWeek=factor(weekday %in% c("Saturday", "Sunday"), levels = c(0, 1), labels = c("Weekday", "Weekend")))
View(PamData)
PamData <- PamData %>% mutate(partOfWeek=weekday %in% c("Saturday", "Sunday"))
View(PamData)
PamData$partOfWeek <- factor(PamData$partOfWeek, levels = c("0", "1"), labels = c("Weekday", "Weekend"))
View(PamData)
PamData <- PamData %>% mutate(partOfWeek=weekday %in% c("Saturday", "Sunday"))
View(PamData)
PamData$partOfWeek <- factor(PamData$partOfWeek, levels = c(FALSE, TRUE), labels = c("Weekday", "Weekend"))
View(PamData)
View(PamData)
str(subset(PamData, partOfWeek=="Weekday"))
str(subset(PamData, parOfWeek=="Weekend"))
str(subset(PamData, partOfWeek=="Weekend"))
12960+4608
avgStepsWdays <- subset(PamData, partOfWeek=="Weekday") %>% group_by(interval) %>% summarise(meansteps=mean(steps))
avgStepsWends <- subset(PamData, partOfWeek=="Weekend") %>% group_by(interval) %>% summarise(meansteps=mean(steps))
with(avgStepsWdays, plot(x = interval, y = meansteps, type = "l"))
with(avgStepsWdays, plot(x = interval, y = meansteps, type = "l",main = "Average steps taken by 5-minute intervals on weekdays"))
par(mfrow = c(2, 1))
with(avgStepsWdays, plot(x = interval, y = meansteps, type = "l",main = "Average steps taken by 5-minute intervals on weekdays"))
with(avgStepsWends, plot(x = interval, y = meansteps, type = "l",main = "Average steps taken by 5-minute intervals on weekends"))
# 2
avgStepsWdays <- subset(PamData, partOfWeek=="Weekday") %>% group_by(interval) %>% summarise(meansteps=mean(steps))
avgStepsWends <- subset(PamData, partOfWeek=="Weekend") %>% group_by(interval) %>% summarise(meansteps=mean(steps))
par(mfrow = c(2, 1))
with(avgStepsWdays, plot(x = interval, y = meansteps, type = "l",main = "Average steps taken by 5-minute intervals on weekdays"))
with(avgStepsWends, plot(x = interval, y = meansteps, type = "l",main = "Average steps taken by 5-minute intervals on weekends"))
par(mfrow = c(2, 1))
with(avgStepsWdays, plot(x = interval, y = meansteps, type = "l",main = "Average steps taken by 5-minute intervals on weekdays"))
with(avgStepsWends, plot(x = interval, y = meansteps, type = "l",main = "Average steps taken by 5-minute intervals on weekends"))
library(knitr)
setwd("/media/umair/F00E03AB0E0369C4/Studies/GitRepos/RepData_PeerAssessment1")
knit2html('PA1_template.Rmd')
q()
